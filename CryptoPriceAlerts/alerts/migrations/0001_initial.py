# Generated by Django 3.2.16 on 2023-04-28 12:18

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coin_id', models.CharField(choices=[('btc', 'Bitcoin'), ('eth', 'Ethereum'), ('usdt', 'Tether'), ('bnb', 'Binancecoin'), ('xrp', 'Ripple'), ('ada', 'Cardano'), ('doge', 'Dogecoin')], help_text='An identifier for the coin. The value shown to the user would be common names but DB will store ticker symbol that is unique to each cryptocurrencyMore Info: https://coinmarketcap.com/alexandria/glossary/ticker-symbol', max_length=64)),
                ('alert_price', models.DecimalField(decimal_places=10, help_text='The price that crypto currency must reach to trigger a price alert email to the user', max_digits=20, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('alert_status', models.CharField(choices=[('created', 'Created'), ('triggered', 'Triggered'), ('deleted', 'Deleted')], default='created', help_text='Current status of this alert', max_length=32)),
                ('triggered_time', models.DateTimeField(blank=True, help_text='The time at which the alert email was triggered if triggered already', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(help_text='User who set this alert', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddConstraint(
            model_name='alert',
            constraint=models.CheckConstraint(check=models.Q(('alert_price__gte', 0)), name='non_negative_alert_price_constraint'),
        ),
        migrations.AlterUniqueTogether(
            name='alert',
            unique_together={('user', 'coin_id', 'alert_price')},
        ),
    ]
